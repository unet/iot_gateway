{
	"nodecfg": { //changes to node configuration
		"prev_id": 122, //previous number of configuration (difference is against it)
		"id": 123, //current number of nodes configuration
		"nodes": { //persistent (rule-independent) and temporary (rule dependent operators) nodes
			IOT_ID:{
				"host_id" : "1", //STRING!!! host which instanciates node. determined by first device or another algorithm by configuration manager host
				"module_id" : 3, //module which must realize node interface
				"module_cfgver" : 0, //module's config version to test against current module

				"rule_id" : 1, //can be zero (or absent) for persistent nodes. must be non-zero for temporary (rule-specific operators) nodes.

				"cfg_id" : 1, //node config number when user settings of node were changed last time
				"params" : <custom data> //user settings for node in module_id specific format
				"devices" : { //user device preferences
					DEVCONN_LABEL: [ //several filters can be specified for each device connection (in order of preference)
						{
							"host_id" : "1", //0 or absent key means 'any host' here
							"contype_id" : 1, //ID of device connection type (iot_hwdevcontype_t). 0 or absent key (and thus 'ident' is not checked) means 'any'
							"ident": <custom data>, //custom contype specific identification data, which must be interpreted by corresponding iot_hwdevident_iface-derived class
						}
					]
				},
				"inputs": { //input links of node
					IN_IDENT: [ LINK_ID1, LINK_ID2 ]//identification of input line with first letter either 'm' or 'v' for message and value input type correspondingly
				},
				outputs": { //output links of node
					OUT_IDENT: [ LINK_ID1, LINK_ID2 ]//identification of output line with first letter either 'm' or 'v' for message and value input type correspondingly
				}
			}
		},
		"rules": {
			RULE_ID: {
				"group_id" : 1, //parent config group of rule. must be present ALWAYS
				"mode_id" : 1, //parent mode of config group of rule. unless list is group-common (then mode_id can be zero or absent).
								//if specified, must match group_id (be in groups list of modes or be group default mode)
			}
		},
		"links": { //connections between nodes
			LINK_ID: RULE_ID //id or parent rule
		}
	},
	"hostcfg" : { //taken from server-common table iot_gateways
		"prev_id": 9, //previous number of configuration (difference is against it) ?????do we need diffs for host config
		"id": 10, //current number of hosts configuration
		"cfgmanager_host": HOST_ID, //default id of host which can send configuration updates and keeps persistent states. can be changed on per-host basis (?). zero disables such functionality
		"logger_host":HOST_ID, //default id of host where all events and status updates are directed. can be changed on per-host basis (?). zero disables this functionality. absence of configuration option means to use cfgmanager_host.
		"timesrc_host":HOST_ID, //id of host which is considered primary clock source. By default is equal to logger_host or cfgmanager_host (when no logger_host defined) or host with minimal id is used.
		"hosts": {
			HOST_ID: {
				"cfg_id" : 1, //host config number when settings of host were changed last time
				"publickey" : "kjhasdkjhasd",
				"serial" : "S12345678", //???
				"listens": [ //reported by gateway actual addresses where gateway is listening for connections, so other hosts from same network can try to make direct connection if no record in connect_map
					{
						"type": "tcp" | "udp" | "bt",
						"ip": IPV4 or IPV6 address, //type-specific param
						"prefix": 24 //type-specific param; network address prefix size in ip (to calculate network address)
						"gateway": { //type-specific param with information about local default gateway to make assumptions about same network
							"local_ip": IPV4 or IPV6  //internal IP of default gateway
							"ext_ip": IPV4 or IPV6 //external IP of default gateway
						}
					}
				],
				"connect": [ //manually specified by user connection params to override "listens" to allow connection to gateway. used after trying connect_map
					{
						"type": "tcp" | "udp" | "bt",
						"metric": 1,
						"host": HOST or IPV[46], //type-specific param for TCP and UDP
						"port": 12002,  for TCP and UDP
					}
				]

				"cfgmanager_host": HOST_ID, //id of host which can send configuration updates to current host. (?) specified host will know from this record that it must proxy conf updates to current host if it isn't default cfgmanager
				"logger_host": HOST_ID, //id of host where all events and status updates are directed. (?) specified host will know from this record that it must proxy notifications updates from current host if it isn't default logger
			}
		}
	},
	"modecfg": {
		"id": 10, //current number of modes configuration
		"groups" : {
			GROUP_ID : {
				"modes": [MODE_ID1, MODE_ID2, ...], //list of possible custom modes. excludes implicit default mode, whose ID is the same as of group
				"modes_modtime" : TIMESTAMP, //time when modes list was modified
				"active_mode": MODE_ID, //current mode for group. can be equal to GROUP_ID if default mode is active
				"active_set": TIMESTAMP //time when latest active mode was set
			}
		},
	}
}

