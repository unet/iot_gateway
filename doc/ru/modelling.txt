	Copyright Unet Global LLC 2017-2018



	Алгоритм моделирования.


1. Термины и определения

	Модуль узла (Node Module) - программный код, реализующий специфичное поведение Узла, опционально с зависимостью от параметров пользователя. Количество и типы
		входов/выходов строго фиксированы конфигурацией Модуля.

	Узел (Node) - вершина графа модели конфигурации. Является экземпляром конкретного Модуля узла и имеет индивидуальные пользовательские параметры. Может
		иметь Входы и/или Выходы, соединенные Связями с другими Узлами.

	Процесс Узла - виртуальное окружение, имитирующее изолированную среду исполнения программного кода Модуля для каждого Узла. Конфигурация каждого Модуля 
		предоставляет информацию о вычислительной сложности экземпляра Модуля, на основании чего Процесс каждого Узла либо создается в отдельном физическом
		потоке (thread) операционной системы, либо работает вместе с несколькими Процессами других Узлов в рамках общего потока. Экземпляры некоторых доверенных
		Модулей с Синхронным исполнением могут быть запущены в рамках системного потока моделирования, что позволяет производить Синхронно-мгновенное исполнение.

	Связь (Link) - направленное связующее ребро в графе модели конфигурации. Соединяет Выход одного узла с совместимым Входом другого узла. Может быть постоянной
		(не зависящей от режима работы конфигурации), или присутствовать только в период активации специфичного режима работы конфигурации.
		
	Вход/Выход узла - типизированный порт ввода сигналов к Узлу или вывода сигналов из Узла. Характеризуется Типом данных (одним или несколькими) и Типом
		обработки сигналов (непрерывный или дискретный, или сокращенно "вход/выход значений" и "вход/выход сообщений"). Входы/выходы с непрерывным Типом обработки
		опционально характеризуются Нотацией типа данных (единица измерения в применении к числовому типу данных), а также могут иметь Неопределенное значение для сигнала: для Выходов - это
		начальное значение или явно присвоенное в процессе Исполнения, а для Входов - это признак Неопределенного значения на связанном Выходе или признак
		отсутствия входящей Связи.

	Тип данных сигнала определяет возможный набор значений для сигнала. Например, Логический тип (значения - Истина или Ложь), Числовой тип (значения в виде
		действительных чисел), Битовая маска, Скан отпечатка пальцев (многокомпонентная структура данных), Файл и т.п. В случае непрерывного Типа обработки
		возможным значением сигнала любого типа данных также является Неопределенное значение.

	Тип обработки сигнала определяет, будет ли сигнал с конкретным значением присутствовать на Входе узла постоянно, пока не изменится соответствующий Выход - это
		непрерывный Тип обработки. Или же сигнал будет приходить в виде сообщения, которое будет удалено из системы моделирования после исполнения Узлом - это
		дискретный Тип обработки. При этом в каждый момент времени ко Входу узла с непрерывной обработкой может быть подключен только один Выход узла совместимого Типа данных.
		А ко входам с дискретной обработкой может быть подключено несколько выходов с совместимыми Типами данных.

	Событие - как правило, это реакция на изменение/возникновение сигнала на одном или нескольких Выходах узлов. Множественные изменения попадают в одно событие,
		если происходят одновременно. Критерии определения одновременности следующие: уведомления об изменении сигналов поступили в поток моделирования
		последовательно и за один событийный цикл, номер миллисекунды во временной метке сигнала одинаков (т.е. изменения произошли в одну миллисекунду),
		все изменения касаются различных Выходов узлов. При несоблюдении любого из перечисленных критериев порождается новое событие. Также специальный
		вид событий порождается в ответ на изменение конфигурации пользователем и в некоторых других случаях, не связанных с сигналами от Узлов.

	Исполнение узла (Execution) - процесс уведомления Модуля узла об изменении значения сигнала на входе с непрерывной обработкой и/или поступлении нового
		сигнала/сигналов на входе с дискретной обработкой. Исполнение может быть проведено асинхронно, синхронно-отложенно или синхронно-мгновенно. Оба
		синхронных варианта возможны только для Узлов, Модуль которых имеет признак синхронной обработки в своей конфигурации. Возможность синхронно-мгновенного
		исполнения определеляется во время исполнения на основе вычислительных ресурсов и фактического поведения Модуля узла (требуется соблюдение дополнительных
		правил при разработке).

	Асинхронное исполнение - это режим Исполнения, не связывающий обработку текущего события необходимостью ожидать результат исполнения. Модуль узла может
		отреагировать мгновенно, через время или вообще не отреагировать на изменение Входов, но в любом случае новые сигналы на Выходах породят новое событие.

	Синхронное исполнение - это режим Исполнения, для завершения которого следует явно присвоить актуальные значения всем изменившимся непрерывным Выходам или
		отправить актуальные сообщения на все нужные дискретные Выходы, так как подразумевается, что Выходы являются прямым отображением Входов. Моделирование
		текущего события останавливается на время, пока синхронный модуль узла не завершит исполнение, даже если это исполнение требует значительное время (но
		не более 5 сек). Подразумевается, что Узлы с синхронным исполнением не генерируют сигналы по другой причине, кроме как в ответ на изменение Входов.
		Это не запрещено для синхронно-отложенного режима, и рассматривается как для Узлов с асинхронным исполнением, но может привести к потере промежуточных
		сигналов. А для синхронно-мгновенного исполнения приводит к переводу Узла на синхронно-отложенный режим.

	Синхронно-отложенное исполнение - это Синхронное исполнение, при котором Модуль узла получает уведомление асинхронно, может затратить некоторое значительное
		время на вычисление результата (но не более 5 сек), и затем асинхронно сообщить системе моделирования о результатах (что позволит продолжить обработку
		текущего события).

	Синхронно-мгновенное исполнение - это Синхронное исполнение, при котором Модуль узла получает уведомление синхронно, в рамках потока моделирования, и обязан
		сразу же предоставить результат.

2. Инициализация моделирования

	Инициализация подсистемы моделирования происходит при запуске ПО IOT Gateway. Выполняются следующие шаги:
	1) читается закешированная конфигурация;
	2) ожидается соединение с остальными хостами, в том числе с сервером конфигурации (2 секунды), синхронизируется конфигурация;
	3) воссоздаются объекты конфигурации, соответствующие Узлам, их Входам, Выходам и Связям для всех возможных режимов всех групп конфигурации;
	4) Выходы с непрерывной обработкой локальных Узлов инициализируются в Неопределенное состояние, а удаленных Узлов - в значение, полученное с соответствующего
	   Хоста (или в Неопределенное в случае отсутствия связи);
	5) производится попытка загрузить Модуль для каждого Узла конфигурации с целью получить конфигурацию, по которой определяются истинный список возможных
	   Входов и Выходов; в случае ошибки Узел работает в Синхронно-мгновенном режиме, как заглушка, всегда имеющая Неопределенное значение всех непрерывных Выходов;
	6) выполняется проверка корректности и совместимости всех активных (в соответствии с режимом каждой группы конфигурации) Входов и Выходов всех Узлов,
	   некорректные Связи игнорируются;
	7) производится запуск процессов для всех локальных Узлов, чьи модули были успешно загружены;
	8) генерация События о начальном присвоении значения всем непрерывным Входам для всех локальных Узлов;

3. Возникновение Событий моделирования

	В устоявшемся штатном режиме работы ПО События моделирования генерируются в ответ на возникновение сигнала: изменение значения на Выходе с непрерывной
обработкой или отправку сообщения через Выход с дискретной обработкой. Как правило, это происходит на Узлах с Асинхронным исполнением в ответ на некое физическое
(например, нажатие кнопки) или программное (например, срабатывание таймера) событие. Процесс Узла уведомляет ядро ПО о новых значениях непрерывных или о сообщениях
на дискретных Выходах путем вызова системной функции kapi_update_outputs(), которая позволяет указать новые значения сразу для нескольких разных Выходов значений
и/или отправить сообщения сразу на несколько разных Выходов сообщений. В случае успеха вызов функции приводит к добавлению серии сигналов в единую очередь обработки
для потока моделирования. Для такой серии сигналов фиксируется момент времени регистрации в контексте Процесса Узла.
	На очередной итерации событийного цикла поток моделирования извлекает из своей очереди все серии сигналов в порядке добавления, формируя по ним новые События или
добавляя в уже существующие. В одно новое Событие могут быть объединены только те серии сигналов, которые произошли одновременно (извлечены из очереди за одну
итерацию событийного цикла и имеют не возрастающую временную метку регистрации в миллисекундах), не имеют общих задействованных Выходов одного и того же узла, не
имеют общих зависимых узлов при моделировании прямого распространения начальных сигналов, и не возникли в рамках Синхронного исполнения уже существующего и
приостановленного События (которое теперь может быть продолжено). При нарушении условия объединения, а также в конце текущей итерации событийного цикла,
завершается формирование очередного События, и оно добавляется в конец отдельной очереди новых Событий. Формирующая серия сигналов становится списком начальных
сигналов События.

4. Начало обработки Событий

	Периодически (TODO: гарантировать быструю обработку событий даже при отсутствии других событий в libuv) выполняется прямой проход по очереди новых Событий с
целью начать обработку. Обработка События может быть начата только, если ни один из зависимых узлов События не заблокирован обработкой другого События (то есть
несколько Событий могут обрабатываться одновременно, если не имеют общих зависимых узлов или правил). Список зависимых узлов строится путем моделирования прямого
распространения всех начальных сигналов События по полному графу конфигурации. В случае успешной проверки (ни один из узлов не заблокирован), выполняется
блокировка всех зависимых узлов и вовлеченных правил, и обработка События начинается.



